

//glass broken detection R12 201907011409

/**/
#include <fstream>
#include <time.h> //for time()
#include <vector> //read folder
#include <Windows.h> //read folder, system("PAUSE")
#include <math.h>

#define PI 3.14159
#define angle2radian 57.29


int positiveNumber(0), falesNumber(0);
bool positiveFlag(0);
int fileName(0);

//Freqency pattern
//A=1500000
float freqPattern[22][15] =
{
{2852,2883},
{2852,2883},
{3193,3162},
{
2914,2945,
2976,
3007,
3038,
3069,
3100,
3131},
{3131,
3162,
3193,
3224,
3255
},
{3317,
3348,
3379,
3410,
3286,
3441,
3472,
3503,
3534,
3565,
3596,
3627,
3658,
3689,
6696
},
{3193,
3224,
3255,
3286,
3317,
},
{3131,
3162
},
{3038,
3069
},
{3131,
3162,
3193,
3224,
3100,
},
{2542,
2573,
2604,
2635,
2511
},
{3255,
3317,
3348,
3286
},
{3100,
3131,
3162,
3193,
3224,
3069
},
{3131,
3162,
3193,
3100,
3224
},
{2883,
2914
},
{
3162,
3193,
3224,
},
{
3162,
3193,
3224,
3255
},
{3069,
3100
},
{3131,
3162,
3193,
3224
},
{ 3131,
3100,
3162
},
{ 3193,
3224,
3255
},
};
float catchFreqPattern[500] = { 0 };
int patternNumber(0);

//
static float cos_array[901] =
{
	1	,
0.999998477	,
0.999993908	,
0.999986292	,
0.999975631	,
0.999961923	,
0.999945169	,
0.99992537	,
0.999902524	,
0.999876632	,
0.999847695	,
0.999815712	,
0.999780683	,
0.999742609	,
0.99970149	,
0.999657325	,
0.999610115	,
0.99955986	,
0.99950656	,
0.999450216	,
0.999390827	,
0.999328394	,
0.999262916	,
0.999194395	,
0.99912283	,
0.999048222	,
0.99897057	,
0.998889875	,
0.998806137	,
0.998719357	,
0.998629535	,
0.99853667	,
0.998440764	,
0.998341817	,
0.998239828	,
0.998134798	,
0.998026728	,
0.997915618	,
0.997801468	,
0.997684279	,
0.99756405	,
0.997440783	,
0.997314477	,
0.997185134	,
0.997052752	,
0.996917334	,
0.996778878	,
0.996637387	,
0.996492859	,
0.996345296	,
0.996194698	,
0.996041065	,
0.995884399	,
0.995724698	,
0.995561965	,
0.995396198	,
0.9952274	,
0.99505557	,
0.994880709	,
0.994702817	,
0.994521895	,
0.994337944	,
0.994150964	,
0.993960955	,
0.993767919	,
0.993571856	,
0.993372766	,
0.99317065	,
0.992965508	,
0.992757342	,
0.992546152	,
0.992331938	,
0.992114701	,
0.991894443	,
0.991671162	,
0.991444861	,
0.99121554	,
0.9909832	,
0.99074784	,
0.990509463	,
0.990268069	,
0.990023658	,
0.989776231	,
0.989525789	,
0.989272333	,
0.989015863	,
0.988756381	,
0.988493887	,
0.988228381	,
0.987959866	,
0.987688341	,
0.987413807	,
0.987136265	,
0.986855716	,
0.986572162	,
0.986285602	,
0.985996037	,
0.985703469	,
0.985407898	,
0.985109326	,
0.984807753	,
0.98450318	,
0.984195608	,
0.983885038	,
0.983571471	,
0.983254908	,
0.982935349	,
0.982612797	,
0.982287251	,
0.981958713	,
0.981627183	,
0.981292664	,
0.980955155	,
0.980614659	,
0.980271175	,
0.979924705	,
0.97957525	,
0.979222811	,
0.978867389	,
0.978508985	,
0.978147601	,
0.977783237	,
0.977415894	,
0.977045574	,
0.976672278	,
0.976296007	,
0.975916762	,
0.975534544	,
0.975149354	,
0.974761194	,
0.974370065	,
0.973975967	,
0.973578903	,
0.973178873	,
0.972775878	,
0.97236992	,
0.971961001	,
0.97154912	,
0.97113428	,
0.970716482	,
0.970295726	,
0.969872015	,
0.96944535	,
0.969015731	,
0.968583161	,
0.96814764	,
0.96770917	,
0.967267753	,
0.966823389	,
0.966376079	,
0.965925826	,
0.965472631	,
0.965016494	,
0.964557418	,
0.964095404	,
0.963630453	,
0.963162567	,
0.962691746	,
0.962217994	,
0.96174131	,
0.961261696	,
0.960779154	,
0.960293686	,
0.959805292	,
0.959313975	,
0.958819735	,
0.958322574	,
0.957822495	,
0.957319498	,
0.956813584	,
0.956304756	,
0.955793015	,
0.955278362	,
0.9547608	,
0.954240329	,
0.953716951	,
0.953190668	,
0.952661481	,
0.952129393	,
0.951594404	,
0.951056516	,
0.950515732	,
0.949972052	,
0.949425478	,
0.948876012	,
0.948323655	,
0.94776841	,
0.947210278	,
0.94664926	,
0.946085359	,
0.945518576	,
0.944948912	,
0.94437637	,
0.943800952	,
0.943222658	,
0.942641491	,
0.942057453	,
0.941470545	,
0.940880769	,
0.940288127	,
0.939692621	,
0.939094252	,
0.938493023	,
0.937888935	,
0.937281989	,
0.936672189	,
0.936059536	,
0.935444031	,
0.934825676	,
0.934204474	,
0.933580426	,
0.932953535	,
0.932323801	,
0.931691228	,
0.931055816	,
0.930417568	,
0.929776486	,
0.929132572	,
0.928485827	,
0.927836254	,
0.927183855	,
0.926528631	,
0.925870585	,
0.925209718	,
0.924546034	,
0.923879533	,
0.923210217	,
0.922538089	,
0.921863152	,
0.921185406	,
0.920504853	,
0.919821497	,
0.919135339	,
0.918446381	,
0.917754626	,
0.917060074	,
0.91636273	,
0.915662593	,
0.914959668	,
0.914253955	,
0.913545458	,
0.912834177	,
0.912120116	,
0.911403277	,
0.910683661	,
0.909961271	,
0.909236109	,
0.908508178	,
0.907777479	,
0.907044014	,
0.906307787	,
0.905568799	,
0.904827052	,
0.90408255	,
0.903335293	,
0.902585284	,
0.901832526	,
0.901077021	,
0.900318771	,
0.899557779	,
0.898794046	,
0.898027576	,
0.89725837	,
0.89648643	,
0.89571176	,
0.894934362	,
0.894154237	,
0.893371388	,
0.892585818	,
0.89179753	,
0.891006524	,
0.890212805	,
0.889416373	,
0.888617233	,
0.887815385	,
0.887010833	,
0.886203579	,
0.885393626	,
0.884580975	,
0.88376563	,
0.882947593	,
0.882126866	,
0.881303452	,
0.880477354	,
0.879648573	,
0.878817113	,
0.877982975	,
0.877146164	,
0.87630668	,
0.875464527	,
0.874619707	,
0.873772223	,
0.872922077	,
0.872069272	,
0.871213811	,
0.870355696	,
0.86949493	,
0.868631514	,
0.867765453	,
0.866896749	,
0.866025404	,
0.865151421	,
0.864274802	,
0.863395551	,
0.862513669	,
0.86162916	,
0.860742027	,
0.859852272	,
0.858959897	,
0.858064906	,
0.857167301	,
0.856267085	,
0.85536426	,
0.85445883	,
0.853550797	,
0.852640164	,
0.851726934	,
0.850811109	,
0.849892693	,
0.848971688	,
0.848048096	,
0.847121921	,
0.846193166	,
0.845261833	,
0.844327926	,
0.843391446	,
0.842452397	,
0.841510782	,
0.840566603	,
0.839619865	,
0.838670568	,
0.837718717	,
0.836764313	,
0.835807361	,
0.834847863	,
0.833885822	,
0.832921241	,
0.831954122	,
0.830984469	,
0.830012285	,
0.829037573	,
0.828060335	,
0.827080574	,
0.826098294	,
0.825113498	,
0.824126189	,
0.823136369	,
0.822144041	,
0.821149209	,
0.820151876	,
0.819152044	,
0.818149717	,
0.817144898	,
0.81613759	,
0.815127796	,
0.814115518	,
0.813100761	,
0.812083527	,
0.811063819	,
0.81004164	,
0.809016994	,
0.807989884	,
0.806960312	,
0.805928282	,
0.804893797	,
0.803856861	,
0.802817475	,
0.801775644	,
0.800731371	,
0.799684658	,
0.79863551	,
0.797583929	,
0.796529918	,
0.795473481	,
0.794414621	,
0.79335334	,
0.792289643	,
0.791223533	,
0.790155012	,
0.789084085	,
0.788010754	,
0.786935022	,
0.785856893	,
0.784776371	,
0.783693457	,
0.782608157	,
0.781520472	,
0.780430407	,
0.779337965	,
0.778243149	,
0.777145961	,
0.776046407	,
0.774944489	,
0.77384021	,
0.772733573	,
0.771624583	,
0.770513243	,
0.769399555	,
0.768283524	,
0.767165152	,
0.766044443	,
0.764921401	,
0.763796029	,
0.76266833	,
0.761538308	,
0.760405966	,
0.759271307	,
0.758134336	,
0.756995056	,
0.755853469	,
0.75470958	,
0.753563392	,
0.752414909	,
0.751264134	,
0.75011107	,
0.748955721	,
0.74779809	,
0.746638182	,
0.745476	,
0.744311546	,
0.743144825	,
0.741975841	,
0.740804596	,
0.739631095	,
0.738455341	,
0.737277337	,
0.736097087	,
0.734914595	,
0.733729865	,
0.732542899	,
0.731353702	,
0.730162277	,
0.728968627	,
0.727772758	,
0.726574671	,
0.725374371	,
0.724171861	,
0.722967146	,
0.721760228	,
0.720551112	,
0.7193398	,
0.718126298	,
0.716910608	,
0.715692734	,
0.71447268	,
0.713250449	,
0.712026046	,
0.710799474	,
0.709570737	,
0.708339838	,
0.707106781	,
0.705871571	,
0.70463421	,
0.703394703	,
0.702153053	,
0.700909264	,
0.699663341	,
0.698415285	,
0.697165103	,
0.695912797	,
0.69465837	,
0.693401828	,
0.692143174	,
0.690882411	,
0.689619544	,
0.688354576	,
0.687087511	,
0.685818353	,
0.684547106	,
0.683273774	,
0.68199836	,
0.680720869	,
0.679441304	,
0.67815967	,
0.67687597	,
0.675590208	,
0.674302388	,
0.673012514	,
0.671720589	,
0.670426619	,
0.669130606	,
0.667832555	,
0.66653247	,
0.665230355	,
0.663926213	,
0.662620048	,
0.661311865	,
0.660001668	,
0.65868946	,
0.657375246	,
0.656059029	,
0.654740814	,
0.653420604	,
0.652098404	,
0.650774217	,
0.649448048	,
0.648119901	,
0.64678978	,
0.645457688	,
0.64412363	,
0.64278761	,
0.641449632	,
0.640109699	,
0.638767818	,
0.63742399	,
0.63607822	,
0.634730513	,
0.633380873	,
0.632029303	,
0.630675807	,
0.629320391	,
0.627963058	,
0.626603811	,
0.625242656	,
0.623879597	,
0.622514637	,
0.62114778	,
0.619779032	,
0.618408395	,
0.617035875	,
0.615661475	,
0.6142852	,
0.612907054	,
0.61152704	,
0.610145164	,
0.608761429	,
0.60737584	,
0.6059884	,
0.604599115	,
0.603207988	,
0.601815023	,
0.600420225	,
0.599023599	,
0.597625147	,
0.596224875	,
0.594822787	,
0.593418887	,
0.592013179	,
0.590605668	,
0.589196357	,
0.587785252	,
0.586372357	,
0.584957675	,
0.583541211	,
0.58212297	,
0.580702956	,
0.579281172	,
0.577857624	,
0.576432316	,
0.575005252	,
0.573576436	,
0.572145873	,
0.570713568	,
0.569279523	,
0.567843745	,
0.566406237	,
0.564967003	,
0.563526049	,
0.562083378	,
0.560638995	,
0.559192903	,
0.557745109	,
0.556295615	,
0.554844427	,
0.553391549	,
0.551936985	,
0.55048074	,
0.549022818	,
0.547563223	,
0.546101961	,
0.544639035	,
0.54317445	,
0.54170821	,
0.54024032	,
0.538770785	,
0.537299608	,
0.535826795	,
0.534352349	,
0.532876276	,
0.53139858	,
0.529919264	,
0.528438335	,
0.526955795	,
0.525471651	,
0.523985906	,
0.522498565	,
0.521009632	,
0.519519112	,
0.518027009	,
0.516533329	,
0.515038075	,
0.513541252	,
0.512042865	,
0.510542918	,
0.509041416	,
0.507538363	,
0.506033764	,
0.504527624	,
0.503019947	,
0.501510737	,
0.5	,
0.49848774	,
0.496973961	,
0.495458668	,
0.493941867	,
0.49242356	,
0.490903754	,
0.489382452	,
0.487859659	,
0.48633538	,
0.48480962	,
0.483282383	,
0.481753674	,
0.480223497	,
0.478691858	,
0.47715876	,
0.475624209	,
0.474088209	,
0.472550765	,
0.471011881	,
0.469471563	,
0.467929814	,
0.46638664	,
0.464842046	,
0.463296035	,
0.461748613	,
0.460199785	,
0.458649554	,
0.457097927	,
0.455544907	,
0.4539905	,
0.452434709	,
0.450877541	,
0.449318999	,
0.447759088	,
0.446197813	,
0.444635179	,
0.443071191	,
0.441505853	,
0.43993917	,
0.438371147	,
0.436801788	,
0.435231099	,
0.433659085	,
0.432085749	,
0.430511097	,
0.428935133	,
0.427357863	,
0.425779292	,
0.424199423	,
0.422618262	,
0.421035813	,
0.419452082	,
0.417867074	,
0.416280792	,
0.414693243	,
0.41310443	,
0.411514359	,
0.409923034	,
0.40833046	,
0.406736643	,
0.405141587	,
0.403545296	,
0.401947777	,
0.400349033	,
0.398749069	,
0.397147891	,
0.395545503	,
0.39394191	,
0.392337117	,
0.390731128	,
0.38912395	,
0.387515586	,
0.385906042	,
0.384295323	,
0.382683432	,
0.381070376	,
0.37945616	,
0.377840787	,
0.376224263	,
0.374606593	,
0.372987783	,
0.371367836	,
0.369746757	,
0.368124553	,
0.366501227	,
0.364876784	,
0.36325123	,
0.36162457	,
0.359996808	,
0.35836795	,
0.356737999	,
0.355106962	,
0.353474844	,
0.351841648	,
0.350207381	,
0.348572047	,
0.346935652	,
0.345298199	,
0.343659695	,
0.342020143	,
0.34037955	,
0.33873792	,
0.337095258	,
0.33545157	,
0.333806859	,
0.332161132	,
0.330514393	,
0.328866647	,
0.327217899	,
0.325568154	,
0.323917418	,
0.322265695	,
0.320612991	,
0.318959309	,
0.317304656	,
0.315649037	,
0.313992456	,
0.312334919	,
0.31067643	,
0.309016994	,
0.307356618	,
0.305695305	,
0.304033061	,
0.302369891	,
0.3007058	,
0.299040792	,
0.297374874	,
0.29570805	,
0.294040325	,
0.292371705	,
0.290702194	,
0.289031797	,
0.28736052	,
0.285688367	,
0.284015345	,
0.282341457	,
0.280666709	,
0.278991106	,
0.277314653	,
0.275637356	,
0.273959219	,
0.272280247	,
0.270600446	,
0.268919821	,
0.267238376	,
0.265556117	,
0.26387305	,
0.262189179	,
0.260504509	,
0.258819045	,
0.257132793	,
0.255445758	,
0.253757945	,
0.252069358	,
0.250380004	,
0.248689887	,
0.246999013	,
0.245307386	,
0.243615012	,
0.241921896	,
0.240228042	,
0.238533458	,
0.236838146	,
0.235142113	,
0.233445364	,
0.231747903	,
0.230049737	,
0.22835087	,
0.226651307	,
0.224951054	,
0.223250116	,
0.221548498	,
0.219846204	,
0.218143241	,
0.216439614	,
0.214735327	,
0.213030386	,
0.211324796	,
0.209618563	,
0.207911691	,
0.206204185	,
0.204496052	,
0.202787295	,
0.201077921	,
0.199367934	,
0.19765734	,
0.195946144	,
0.194234351	,
0.192521967	,
0.190808995	,
0.189095443	,
0.187381315	,
0.185666615	,
0.183951351	,
0.182235525	,
0.180519145	,
0.178802215	,
0.17708474	,
0.175366726	,
0.173648178	,
0.1719291	,
0.170209499	,
0.16848938	,
0.166768747	,
0.165047606	,
0.163325962	,
0.161603821	,
0.159881188	,
0.158158067	,
0.156434465	,
0.154710386	,
0.152985836	,
0.15126082	,
0.149535343	,
0.147809411	,
0.146083029	,
0.144356201	,
0.142628934	,
0.140901232	,
0.139173101	,
0.137444546	,
0.135715572	,
0.133986185	,
0.13225639	,
0.130526192	,
0.128795597	,
0.127064609	,
0.125333234	,
0.123601477	,
0.121869343	,
0.120136839	,
0.118403968	,
0.116670737	,
0.11493715	,
0.113203214	,
0.111468932	,
0.109734311	,
0.107999356	,
0.106264071	,
0.104528463	,
0.102792537	,
0.101056297	,
0.09931975	,
0.0975829	,
0.095845753	,
0.094108313	,
0.092370587	,
0.09063258	,
0.088894297	,
0.087155743	,
0.085416923	,
0.083677843	,
0.081938509	,
0.080198924	,
0.078459096	,
0.076719028	,
0.074978727	,
0.073238197	,
0.071497444	,
0.069756474	,
0.068015291	,
0.0662739	,
0.064532308	,
0.06279052	,
0.06104854	,
0.059306374	,
0.057564027	,
0.055821505	,
0.054078813	,
0.052335956	,
0.05059294	,
0.04884977	,
0.047106451	,
0.045362988	,
0.043619387	,
0.041875654	,
0.040131793	,
0.038387809	,
0.036643709	,
0.034899497	,
0.033155178	,
0.031410759	,
0.029666244	,
0.027921639	,
0.026176948	,
0.024432178	,
0.022687334	,
0.02094242	,
0.019197442	,
0.017452406	,
0.015707317	,
0.01396218	,
0.012217001	,
0.010471784	,
0.008726535	,
0.00698126	,
0.005235964	,
0.003490651	,
0.001745328	,
0
};
static float sin_array[901] =
{
	0	,
0.001745328	,
0.003490651	,
0.005235964	,
0.00698126	,
0.008726535	,
0.010471784	,
0.012217001	,
0.01396218	,
0.015707317	,
0.017452406	,
0.019197442	,
0.02094242	,
0.022687334	,
0.024432178	,
0.026176948	,
0.027921639	,
0.029666244	,
0.031410759	,
0.033155178	,
0.034899497	,
0.036643709	,
0.038387809	,
0.040131793	,
0.041875654	,
0.043619387	,
0.045362988	,
0.047106451	,
0.04884977	,
0.05059294	,
0.052335956	,
0.054078813	,
0.055821505	,
0.057564027	,
0.059306374	,
0.06104854	,
0.06279052	,
0.064532308	,
0.0662739	,
0.068015291	,
0.069756474	,
0.071497444	,
0.073238197	,
0.074978727	,
0.076719028	,
0.078459096	,
0.080198924	,
0.081938509	,
0.083677843	,
0.085416923	,
0.087155743	,
0.088894297	,
0.09063258	,
0.092370587	,
0.094108313	,
0.095845753	,
0.0975829	,
0.09931975	,
0.101056297	,
0.102792537	,
0.104528463	,
0.106264071	,
0.107999356	,
0.109734311	,
0.111468932	,
0.113203214	,
0.11493715	,
0.116670737	,
0.118403968	,
0.120136839	,
0.121869343	,
0.123601477	,
0.125333234	,
0.127064609	,
0.128795597	,
0.130526192	,
0.13225639	,
0.133986185	,
0.135715572	,
0.137444546	,
0.139173101	,
0.140901232	,
0.142628934	,
0.144356201	,
0.146083029	,
0.147809411	,
0.149535343	,
0.15126082	,
0.152985836	,
0.154710386	,
0.156434465	,
0.158158067	,
0.159881188	,
0.161603821	,
0.163325962	,
0.165047606	,
0.166768747	,
0.16848938	,
0.170209499	,
0.1719291	,
0.173648178	,
0.175366726	,
0.17708474	,
0.178802215	,
0.180519145	,
0.182235525	,
0.183951351	,
0.185666615	,
0.187381315	,
0.189095443	,
0.190808995	,
0.192521967	,
0.194234351	,
0.195946144	,
0.19765734	,
0.199367934	,
0.201077921	,
0.202787295	,
0.204496052	,
0.206204185	,
0.207911691	,
0.209618563	,
0.211324796	,
0.213030386	,
0.214735327	,
0.216439614	,
0.218143241	,
0.219846204	,
0.221548498	,
0.223250116	,
0.224951054	,
0.226651307	,
0.22835087	,
0.230049737	,
0.231747903	,
0.233445364	,
0.235142113	,
0.236838146	,
0.238533458	,
0.240228042	,
0.241921896	,
0.243615012	,
0.245307386	,
0.246999013	,
0.248689887	,
0.250380004	,
0.252069358	,
0.253757945	,
0.255445758	,
0.257132793	,
0.258819045	,
0.260504509	,
0.262189179	,
0.26387305	,
0.265556117	,
0.267238376	,
0.268919821	,
0.270600446	,
0.272280247	,
0.273959219	,
0.275637356	,
0.277314653	,
0.278991106	,
0.280666709	,
0.282341457	,
0.284015345	,
0.285688367	,
0.28736052	,
0.289031797	,
0.290702194	,
0.292371705	,
0.294040325	,
0.29570805	,
0.297374874	,
0.299040792	,
0.3007058	,
0.302369891	,
0.304033061	,
0.305695305	,
0.307356618	,
0.309016994	,
0.31067643	,
0.312334919	,
0.313992456	,
0.315649037	,
0.317304656	,
0.318959309	,
0.320612991	,
0.322265695	,
0.323917418	,
0.325568154	,
0.327217899	,
0.328866647	,
0.330514393	,
0.332161132	,
0.333806859	,
0.33545157	,
0.337095258	,
0.33873792	,
0.34037955	,
0.342020143	,
0.343659695	,
0.345298199	,
0.346935652	,
0.348572047	,
0.350207381	,
0.351841648	,
0.353474844	,
0.355106962	,
0.356737999	,
0.35836795	,
0.359996808	,
0.36162457	,
0.36325123	,
0.364876784	,
0.366501227	,
0.368124553	,
0.369746757	,
0.371367836	,
0.372987783	,
0.374606593	,
0.376224263	,
0.377840787	,
0.37945616	,
0.381070376	,
0.382683432	,
0.384295323	,
0.385906042	,
0.387515586	,
0.38912395	,
0.390731128	,
0.392337117	,
0.39394191	,
0.395545503	,
0.397147891	,
0.398749069	,
0.400349033	,
0.401947777	,
0.403545296	,
0.405141587	,
0.406736643	,
0.40833046	,
0.409923034	,
0.411514359	,
0.41310443	,
0.414693243	,
0.416280792	,
0.417867074	,
0.419452082	,
0.421035813	,
0.422618262	,
0.424199423	,
0.425779292	,
0.427357863	,
0.428935133	,
0.430511097	,
0.432085749	,
0.433659085	,
0.435231099	,
0.436801788	,
0.438371147	,
0.43993917	,
0.441505853	,
0.443071191	,
0.444635179	,
0.446197813	,
0.447759088	,
0.449318999	,
0.450877541	,
0.452434709	,
0.4539905	,
0.455544907	,
0.457097927	,
0.458649554	,
0.460199785	,
0.461748613	,
0.463296035	,
0.464842046	,
0.46638664	,
0.467929814	,
0.469471563	,
0.471011881	,
0.472550765	,
0.474088209	,
0.475624209	,
0.47715876	,
0.478691858	,
0.480223497	,
0.481753674	,
0.483282383	,
0.48480962	,
0.48633538	,
0.487859659	,
0.489382452	,
0.490903754	,
0.49242356	,
0.493941867	,
0.495458668	,
0.496973961	,
0.49848774	,
0.5	,
0.501510737	,
0.503019947	,
0.504527624	,
0.506033764	,
0.507538363	,
0.509041416	,
0.510542918	,
0.512042865	,
0.513541252	,
0.515038075	,
0.516533329	,
0.518027009	,
0.519519112	,
0.521009632	,
0.522498565	,
0.523985906	,
0.525471651	,
0.526955795	,
0.528438335	,
0.529919264	,
0.53139858	,
0.532876276	,
0.534352349	,
0.535826795	,
0.537299608	,
0.538770785	,
0.54024032	,
0.54170821	,
0.54317445	,
0.544639035	,
0.546101961	,
0.547563223	,
0.549022818	,
0.55048074	,
0.551936985	,
0.553391549	,
0.554844427	,
0.556295616	,
0.557745109	,
0.559192903	,
0.560638995	,
0.562083378	,
0.563526049	,
0.564967003	,
0.566406237	,
0.567843745	,
0.569279523	,
0.570713568	,
0.572145873	,
0.573576436	,
0.575005252	,
0.576432316	,
0.577857624	,
0.579281172	,
0.580702956	,
0.58212297	,
0.583541211	,
0.584957675	,
0.586372357	,
0.587785252	,
0.589196357	,
0.590605668	,
0.592013179	,
0.593418887	,
0.594822787	,
0.596224875	,
0.597625147	,
0.599023599	,
0.600420225	,
0.601815023	,
0.603207988	,
0.604599115	,
0.6059884	,
0.60737584	,
0.608761429	,
0.610145164	,
0.61152704	,
0.612907054	,
0.6142852	,
0.615661475	,
0.617035875	,
0.618408395	,
0.619779032	,
0.62114778	,
0.622514637	,
0.623879597	,
0.625242656	,
0.626603811	,
0.627963058	,
0.629320391	,
0.630675807	,
0.632029303	,
0.633380873	,
0.634730513	,
0.63607822	,
0.63742399	,
0.638767818	,
0.640109699	,
0.641449632	,
0.64278761	,
0.64412363	,
0.645457688	,
0.64678978	,
0.648119901	,
0.649448048	,
0.650774217	,
0.652098404	,
0.653420604	,
0.654740814	,
0.656059029	,
0.657375246	,
0.65868946	,
0.660001668	,
0.661311865	,
0.662620048	,
0.663926213	,
0.665230355	,
0.66653247	,
0.667832555	,
0.669130606	,
0.670426619	,
0.671720589	,
0.673012514	,
0.674302388	,
0.675590208	,
0.67687597	,
0.67815967	,
0.679441304	,
0.680720869	,
0.68199836	,
0.683273774	,
0.684547106	,
0.685818353	,
0.687087511	,
0.688354576	,
0.689619544	,
0.690882411	,
0.692143174	,
0.693401828	,
0.69465837	,
0.695912797	,
0.697165103	,
0.698415285	,
0.699663341	,
0.700909264	,
0.702153053	,
0.703394703	,
0.70463421	,
0.705871571	,
0.707106781	,
0.708339838	,
0.709570737	,
0.710799474	,
0.712026046	,
0.713250449	,
0.71447268	,
0.715692734	,
0.716910608	,
0.718126298	,
0.7193398	,
0.720551112	,
0.721760228	,
0.722967146	,
0.724171861	,
0.725374371	,
0.726574671	,
0.727772758	,
0.728968627	,
0.730162277	,
0.731353702	,
0.732542899	,
0.733729865	,
0.734914595	,
0.736097087	,
0.737277337	,
0.738455341	,
0.739631095	,
0.740804596	,
0.741975841	,
0.743144825	,
0.744311546	,
0.745476	,
0.746638182	,
0.74779809	,
0.748955721	,
0.75011107	,
0.751264134	,
0.752414909	,
0.753563392	,
0.75470958	,
0.755853469	,
0.756995056	,
0.758134336	,
0.759271307	,
0.760405966	,
0.761538308	,
0.76266833	,
0.763796029	,
0.764921401	,
0.766044443	,
0.767165152	,
0.768283524	,
0.769399555	,
0.770513243	,
0.771624583	,
0.772733573	,
0.77384021	,
0.774944489	,
0.776046407	,
0.777145961	,
0.778243149	,
0.779337965	,
0.780430407	,
0.781520472	,
0.782608157	,
0.783693457	,
0.784776371	,
0.785856893	,
0.786935022	,
0.788010754	,
0.789084085	,
0.790155012	,
0.791223533	,
0.792289643	,
0.79335334	,
0.794414621	,
0.795473481	,
0.796529918	,
0.797583929	,
0.79863551	,
0.799684658	,
0.800731371	,
0.801775644	,
0.802817475	,
0.803856861	,
0.804893797	,
0.805928282	,
0.806960312	,
0.807989884	,
0.809016994	,
0.81004164	,
0.811063819	,
0.812083527	,
0.813100761	,
0.814115518	,
0.815127796	,
0.81613759	,
0.817144898	,
0.818149717	,
0.819152044	,
0.820151876	,
0.821149209	,
0.822144041	,
0.823136369	,
0.824126189	,
0.825113498	,
0.826098294	,
0.827080574	,
0.828060335	,
0.829037573	,
0.830012285	,
0.830984469	,
0.831954122	,
0.832921241	,
0.833885822	,
0.834847863	,
0.835807361	,
0.836764313	,
0.837718717	,
0.838670568	,
0.839619865	,
0.840566603	,
0.841510782	,
0.842452397	,
0.843391446	,
0.844327926	,
0.845261833	,
0.846193166	,
0.847121921	,
0.848048096	,
0.848971688	,
0.849892693	,
0.850811109	,
0.851726934	,
0.852640164	,
0.853550797	,
0.85445883	,
0.85536426	,
0.856267085	,
0.857167301	,
0.858064906	,
0.858959897	,
0.859852272	,
0.860742027	,
0.86162916	,
0.862513669	,
0.863395551	,
0.864274802	,
0.865151421	,
0.866025404	,
0.866896749	,
0.867765453	,
0.868631514	,
0.86949493	,
0.870355696	,
0.871213811	,
0.872069272	,
0.872922077	,
0.873772223	,
0.874619707	,
0.875464527	,
0.87630668	,
0.877146164	,
0.877982975	,
0.878817113	,
0.879648573	,
0.880477354	,
0.881303452	,
0.882126866	,
0.882947593	,
0.88376563	,
0.884580975	,
0.885393626	,
0.886203579	,
0.887010833	,
0.887815385	,
0.888617233	,
0.889416373	,
0.890212805	,
0.891006524	,
0.89179753	,
0.892585818	,
0.893371388	,
0.894154237	,
0.894934362	,
0.89571176	,
0.89648643	,
0.89725837	,
0.898027576	,
0.898794046	,
0.899557779	,
0.900318771	,
0.901077021	,
0.901832526	,
0.902585284	,
0.903335293	,
0.90408255	,
0.904827052	,
0.905568799	,
0.906307787	,
0.907044014	,
0.907777479	,
0.908508178	,
0.909236109	,
0.909961271	,
0.910683661	,
0.911403277	,
0.912120116	,
0.912834177	,
0.913545458	,
0.914253955	,
0.914959668	,
0.915662593	,
0.91636273	,
0.917060074	,
0.917754626	,
0.918446381	,
0.919135339	,
0.919821497	,
0.920504853	,
0.921185406	,
0.921863152	,
0.922538089	,
0.923210217	,
0.923879533	,
0.924546034	,
0.925209718	,
0.925870585	,
0.926528631	,
0.927183855	,
0.927836254	,
0.928485827	,
0.929132572	,
0.929776486	,
0.930417568	,
0.931055816	,
0.931691228	,
0.932323801	,
0.932953535	,
0.933580426	,
0.934204474	,
0.934825676	,
0.935444031	,
0.936059536	,
0.936672189	,
0.937281989	,
0.937888935	,
0.938493023	,
0.939094252	,
0.939692621	,
0.940288127	,
0.940880769	,
0.941470545	,
0.942057453	,
0.942641491	,
0.943222658	,
0.943800952	,
0.94437637	,
0.944948912	,
0.945518576	,
0.946085359	,
0.94664926	,
0.947210278	,
0.94776841	,
0.948323655	,
0.948876012	,
0.949425478	,
0.949972052	,
0.950515732	,
0.951056516	,
0.951594404	,
0.952129393	,
0.952661481	,
0.953190668	,
0.953716951	,
0.954240329	,
0.9547608	,
0.955278362	,
0.955793015	,
0.956304756	,
0.956813584	,
0.957319498	,
0.957822495	,
0.958322574	,
0.958819735	,
0.959313975	,
0.959805292	,
0.960293686	,
0.960779154	,
0.961261696	,
0.96174131	,
0.962217994	,
0.962691746	,
0.963162567	,
0.963630453	,
0.964095404	,
0.964557418	,
0.965016494	,
0.965472631	,
0.965925826	,
0.966376079	,
0.966823389	,
0.967267753	,
0.96770917	,
0.96814764	,
0.968583161	,
0.969015731	,
0.96944535	,
0.969872015	,
0.970295726	,
0.970716482	,
0.97113428	,
0.97154912	,
0.971961001	,
0.97236992	,
0.972775878	,
0.973178873	,
0.973578903	,
0.973975967	,
0.974370065	,
0.974761194	,
0.975149354	,
0.975534544	,
0.975916762	,
0.976296007	,
0.976672278	,
0.977045574	,
0.977415894	,
0.977783237	,
0.978147601	,
0.978508985	,
0.978867389	,
0.979222811	,
0.97957525	,
0.979924705	,
0.980271175	,
0.980614659	,
0.980955155	,
0.981292664	,
0.981627183	,
0.981958713	,
0.982287251	,
0.982612797	,
0.982935349	,
0.983254908	,
0.983571471	,
0.983885038	,
0.984195608	,
0.98450318	,
0.984807753	,
0.985109326	,
0.985407898	,
0.985703469	,
0.985996037	,
0.986285602	,
0.986572162	,
0.986855716	,
0.987136265	,
0.987413807	,
0.987688341	,
0.987959866	,
0.988228381	,
0.988493887	,
0.988756381	,
0.989015863	,
0.989272333	,
0.989525789	,
0.989776231	,
0.990023658	,
0.990268069	,
0.990509463	,
0.99074784	,
0.9909832	,
0.99121554	,
0.991444861	,
0.991671162	,
0.991894443	,
0.992114701	,
0.992331938	,
0.992546152	,
0.992757342	,
0.992965508	,
0.99317065	,
0.993372766	,
0.993571856	,
0.993767919	,
0.993960955	,
0.994150964	,
0.994337944	,
0.994521895	,
0.994702817	,
0.994880709	,
0.99505557	,
0.9952274	,
0.995396198	,
0.995561965	,
0.995724698	,
0.995884399	,
0.996041065	,
0.996194698	,
0.996345296	,
0.996492859	,
0.996637387	,
0.996778878	,
0.996917334	,
0.997052752	,
0.997185134	,
0.997314477	,
0.997440783	,
0.99756405	,
0.997684279	,
0.997801468	,
0.997915618	,
0.998026728	,
0.998134798	,
0.998239828	,
0.998341817	,
0.998440764	,
0.99853667	,
0.998629535	,
0.998719357	,
0.998806137	,
0.998889875	,
0.99897057	,
0.999048222	,
0.99912283	,
0.999194395	,
0.999262916	,
0.999328394	,
0.999390827	,
0.999450216	,
0.99950656	,
0.99955986	,
0.999610115	,
0.999657325	,
0.99970149	,
0.999742609	,
0.999780683	,
0.999815712	,
0.999847695	,
0.999876632	,
0.999902524	,
0.99992537	,
0.999945169	,
0.999961923	,
0.999975631	,
0.999986292	,
0.999993908	,
0.999998477	,
1

};
//
//Read a folder
/*
input:
firstFileName

output:
folderList
fileList
folderList.size()
fileList.size()

*/
class Read_folder
{
public:
	std::string firstFileName;
	std::string str, pattern, filename;
	std::vector<std::string> folderList, fileList;
	std::vector<std::string> fileNmaeCheckResult;
	Read_folder();
	//~Read_folder();
	void StrSplit();
	void GetFileNameListInDir();
	void main();
};
Read_folder::Read_folder()
{
}
void Read_folder::StrSplit()
{
	std::string::size_type pos;

	str = str + pattern;

	for (int i = 0; i < str.size(); i++)
	{
		pos = str.find(pattern, i);
		if (pos < str.size())
		{
			std::string s = str.substr(i, pos - 1);
			if (s.length() > 1)
			{
				s = s.substr(0, s.length() - 1);
			}

			if (i > 0)
			{
				fileNmaeCheckResult.push_back(s);
			}
			i = pos + pattern.size() - 1;
		}
	}

}
void Read_folder::GetFileNameListInDir()
{
	short buffer1(0);
	//windows x64
	std::string search_path = firstFileName + "/*.*";
	WIN32_FIND_DATA fd;
	HANDLE hFind = ::FindFirstFile(search_path.c_str(), &fd);
	if (hFind != INVALID_HANDLE_VALUE)
	{
		do
		{
			if (!(fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) //is fd not a folder? (is file)
			{
				filename = fd.cFileName;// FindFileData.cFileName;
				//For StrSplit()
				str = filename;
				pattern = ".";
				StrSplit();
				str = fileNmaeCheckResult[fileNmaeCheckResult.size() - 1];

				//
				/**/
				if (("raw" == str || "RAW" == str || "wav" == str || "WAV" == str))
				{

					filename = firstFileName + "/" + filename;
					fileList.push_back(filename);
				}

				//nameList.push_back(fd.cFileName);


			}
			else //detecting the names of folder
			{

				//test 20190619
				filename = fd.cFileName;// FindFileData.cFileName;
				filename = firstFileName + "/" + filename;
				//std::cout << vecImages.size() << std::endl;
				//folderList.push_back(filename);
				//printf("%s\n", fd.cFileName);
				if (buffer1 < 2)
				{
					buffer1++;
				}
				else
				{
					folderList.push_back(filename);
					//folderNumber++;
				}

			}
		} while (::FindNextFile(hFind, &fd));
		::FindClose(hFind);
	}

	//return nameList;
}
void Read_folder::main()
{
	//int allFolderNumber(0);

	for (int i(0);; i++)
	{
		if (i == 0)
		{
			folderList.push_back(firstFileName);
			//printf("%s\n", folderList[i].c_str());
			firstFileName = folderList[0];
			GetFileNameListInDir();
			//printf("%s\n", folderList[i].c_str());
		}
		else
		{
			firstFileName = folderList[i];
			GetFileNameListInDir();
			//printf("%s\n", folderList[i].c_str());
		}
		//allFolderNumber =allFolderNumber + folderNumber; 
		//allFileNumber = allFileNumber + fileNumber;
		//printf("%d %d\n", i,folderList.size());
		if (i == folderList.size() - 1)  // After read the last folder
			break;
		//if (i == allFolderNumber)  // After read the last folder 
		//	break;
	}
}

//T3T4
class T3T4_alert_R2
{
public:
	//FFT input setting
	//int fft_start_flag, fft_end_flag;
	int sampling_rate;
	//int max_output_data;
	//int buffer1;
	//int input_data_size;
	//FFT middle array
	//short* input_t_data;
	//double* w_array;
	//double* output_data_Amplitude;
	//double output_re;
	//double output_im;
	float* spectrum_x_axis;
	//
	float* re, * im;
	int data_size;
	int n, m;
	float* cost, * sint;
	float* output_data_Amplitude;
	//Alert identity
	float alert_period;
	int alertPeriodPoint, alert_counter_threshold, detectionCounter, alert_counter; //
	short alert_frequency_minimum, alert_frequency_maximum; //specific frequency
	int alert_amplitude_threshold;
	bool buffer_alert_flag;
	bool audio_alert_flag;
	//short spectrum_y_and_filter;
	//
	float cos_table(int input_value);
	float sin_table(int input_value);
	int sqrt_Iterative(float input_value);
	//
	void T3T4_detection();
	void T3T4_measurement();
	void FFT_2_radix();
	void fft_x_axis();
	void fft_array_initial();
	void alert_initial();

	T3T4_alert_R2();
	~T3T4_alert_R2();
};
T3T4_alert_R2::T3T4_alert_R2()
{
	//input_data_size = 500;
	//input_t_data = new short[input_data_size];
	alert_period = 1.5; //second
	detectionCounter = 0;
	sampling_rate = 16000;
	//max_output_data = 0;
	//
	data_size = 512;
	re = new float[data_size];
	im = new float[data_size];
	cost = new float[data_size / 2];
	sint = new float[data_size / 2];
	output_data_Amplitude = new float[data_size / 2];
	//
	//alert_times_threshold = 16;
	//fft_start_flag = 0;
	//fft_end_flag = fft_start_flag + data_size;
	alert_frequency_minimum = 2800; //
	alert_frequency_maximum = 3200; //specific frequency maximum
	alert_amplitude_threshold = 1000000; //
	//
	alertPeriodPoint = alert_period * sampling_rate / data_size;
	alert_counter_threshold = alertPeriodPoint * 0.5;
	//printf("%f %d %d %d %d\n", alert_period, sampling_rate, data_size, alertPeriodPoint, alert_counter_threshold);
}
void T3T4_alert_R2::alert_initial()
{
	alert_counter = alert_period * 0.8;
	buffer_alert_flag = 0;
	audio_alert_flag = 0;
	//detectionCounter = 0;
}
//initial the arraies in FFT radix 2 Algorithm
void T3T4_alert_R2::fft_array_initial()
{
	//
	alertPeriodPoint = alert_period * sampling_rate / data_size;
	alert_counter_threshold = alertPeriodPoint * 0.5;
	//printf("%f %d %d %d %d\n", alert_period, sampling_rate, data_size, alertPeriodPoint, alert_counter_threshold);

	//w_array = new double[input_data_size];
	//output_data_Amplitude = new double[input_data_size];
	spectrum_x_axis = new float[data_size];
	//
	delete re, im, cost, sint, output_data_Amplitude;
	re = new float[data_size];
	im = new float[data_size];
	output_data_Amplitude = new float[data_size];
	cost = new float[data_size / 2];
	sint = new float[data_size / 2];
	n = data_size;
	m = log(data_size) / log(2);
	//printf("%d\n", m);
	float base(0);
	for (int i = 0; i < data_size / 2; i++)
	{
		base = -2 * PI * i / data_size;
		cost[i] = cos(base);
		sint[i] = sin(base);
	}
}
//FFT spectrum x axis
void T3T4_alert_R2::fft_x_axis()
{

	float b1(0);
	b1 = sampling_rate / data_size;
	//printf("%d %d %f\n", sampling_rate, data_size, b1);
	for (int i(0); i < data_size; i++)
	{
		spectrum_x_axis[i] = i * b1;
	}
}
//FFT radix 2 Algorithm
void T3T4_alert_R2::FFT_2_radix()
{
	int i = 0;
	int j = 0;
	int k = 0;
	int n1 = 0;
	int n2 = 0;
	int a = 0;

	float cos = 0;
	float sin = 0;
	float t1 = 0;
	float t2 = 0;

	// Bit-reverse
	n2 = n / 2;

	for (i = 1; i < n - 1; i++)
	{

		n1 = n2;
		while (j >= n1)
		{
			j = j - n1;
			n1 = n1 / 2;
		}
		j = j + n1;
		if (i < j)
		{
			t1 = re[i];
			re[i] = re[j];
			re[j] = t1;
			t1 = im[i];
			im[i] = im[j];
			im[j] = t1;
		}
	}

	// FFT
	n1 = 0;
	n2 = 1;

	for (i = 0; i < m; i++)
	{
		n1 = n2;
		n2 = n2 + n2;
		a = 0;

		for (j = 0; j < n1; j++)
		{
			cos = cost[a];
			sin = sint[a];
			for (k = j; k < n; k = k + n2)
			{
				t1 = cos * re[k + n1] - sin * im[k + n1];
				t2 = sin * re[k + n1] + cos * im[k + n1];
				re[k + n1] = re[k] - t1;
				im[k + n1] = im[k] - t2;
				re[k] = re[k] + t1;
				im[k] = im[k] + t2;
				//printf("%f %f \n", t1,t2);
				//printf("i=%d j=%d k=%d a=%d\n", i, j, k, a);
			}
			a += 1 << (m - i - 1);
		}
	}
	//To get the absolute value of complex number
	for (int g = 0; g < data_size; g++)
	{
		output_data_Amplitude[g] = sqrt(re[g] * re[g] + im[g] * im[g]);
		//printf("%f \n", output_data_Amplitude[g]);
	}
}
//T3T4_detection
void T3T4_alert_R2::T3T4_detection()
{
	//Show the start and end flag
	//printf("%d %d %f %f\n",fft_start_flag, fft_end_flag, float(fft_start_flag/16000), float(fft_end_flag / 16000));
	//buffer1 = alert_amplitude_threshold * 0.3;

	alert_amplitude_threshold = 1200000;
	//alert_times_threshold = 8;
	if (detectionCounter > 0)
	{
		detectionCounter++;
	}
	buffer_alert_flag = 0;
	//printf("\n");
	//printf("\n");
	int b1(0), c1(0), c2(0);
	b1 = sampling_rate / data_size;
	c1 = alert_frequency_minimum / b1;
	c2 = alert_frequency_maximum / b1;
	//


	for (int i(c1); i < data_size / 2; i++)
	{
		if (output_data_Amplitude[i] > alert_amplitude_threshold)
		{
			//printf("%f %f \n", spectrum_x_axis[i], output_data_Amplitude[i]);
			//if (spectrum_x_axis[i] > c2) break;
			//printf("%f\n", spectrum_x_axis[i]);
			for (int n(0); n < 22; n++)
			{
				for (int m(0);; m++)
				{
					if (freqPattern[n][m] == 0)
					{
						//printf("Alert n=%d m= %d \n",n,m);
						buffer_alert_flag = 1;
						break;
					}
					//printf("%f ", freqPattern[n][m]);
					if ((spectrum_x_axis[i] > freqPattern[n][m] - b1) && (spectrum_x_axis[i] < freqPattern[n][m] + b1))
					{
						//printf("Matched! %f %f\n", spectrum_x_axis[i],freqPattern[n][m]);
						m++;
						//buffer_alert_flag = 1;
						//c1++;
						//break;
					}
					else
						break;
					//if (buffer_alert_flag == 1) break;
				}

				//printf("\n");
			}
			if (spectrum_x_axis[i] > alert_frequency_maximum)
			{
				//printf("Filted! %f %f\n", spectrum_x_axis[i]);
				buffer_alert_flag = 0;
				break;
			}


		}
	}

	if (buffer_alert_flag == 1)
	{
		//printf("Alert %d %d %d \n", alertPeriodPoint, alert_counter, alert_counter_threshold);
		buffer_alert_flag = 0;
		alert_counter++;

		if (alert_counter == 1)
		{
			detectionCounter = 1;
		}

	}
	if (detectionCounter > alertPeriodPoint)
	{
		alert_counter = 0;
		detectionCounter = 0;
	}
	//Check the continuously alert
	if (alert_counter >= alert_counter_threshold)
	{
		alert_counter = 0;
		audio_alert_flag = 1;

	}

}
//T3T4 measurement
void T3T4_alert_R2::T3T4_measurement()
{
	//Show the start and end flag
	//printf("%d %d %f %f\n",fft_start_flag, fft_end_flag, float(fft_start_flag/16000), float(fft_end_flag / 16000));
	//buffer1 = alert_amplitude_threshold * 0.3;


	//printf("\n");
	//printf("\n");
	int b1(0);
	b1 = sampling_rate / data_size;
	for (int i(0); i < data_size / 2; i++)
	{
		if (output_data_Amplitude[i] > alert_amplitude_threshold)
		{
			//Catch Frequency Pattern
			/*
			//printf("A%f\n", spectrum_x_axis[i]);
			for (int k(0); k < patternNumber+1;k++)
			{
				//if ((spectrum_x_axis[i]<catchFreqPattern[k]+ b1)&&( spectrum_x_axis[i]> catchFreqPattern[k]- b1))
				if (spectrum_x_axis[i] == catchFreqPattern[k])
				{
					//printf("B%f\n", spectrum_x_axis[i]);
					break;
				}
				if (catchFreqPattern[k] == 0)
				{
					//printf("C%f\n", spectrum_x_axis[i]);
					catchFreqPattern[k] = spectrum_x_axis[i];
					patternNumber++;
					break;
				}
			}*/

			//check and match the Pattern
			/**/
			//check and match the Pattern

			/*
			for (int j(0); j < 29; j++)
			{
				if ((spectrum_x_axis[i] < freqPattern[j] + b1) && (spectrum_x_axis[i] > freqPattern[j] - b1))
				{
					printf("%f %d\n", spectrum_x_axis[i], alert_counter);
					buffer_alert_flag = 1;
					break;
				}
				if (j == 29 - 1)
				{
					printf("%f %d\n", spectrum_x_axis[i], alert_counter);
					//printf("%f\n", spectrum_x_axis[i]);
					buffer_alert_flag = 0;
				}
			}
			*/
		}
	}
}
//SQRT
int T3T4_alert_R2::sqrt_Iterative(float input_value)
{
	double result_value(0);
	double trial_value(1);
	double check_value(0);

	for (int i(0);; i++)
	{
		result_value = 0.5 * (trial_value + input_value / trial_value);
		check_value = result_value - trial_value;
		//printf("i=%d , result_value=%f\n", i, result_value); //check the each result
		//printf("i=%d , result_value=%f\n", i, check_value); // check the each delt_value

		if (check_value < 0)
		{
			check_value = -check_value;
		}

		if (check_value < 0.1) //the accuracy of result
		{
			//printf("%.2lf , result_value=%f\n", input_value, result_value); // check the each delt_value
			return result_value;
			//break;
		}
		trial_value = result_value;
	}
}
//Sine_table
float T3T4_alert_R2::sin_table(int input_value)
{
	float return_value = 0;
	int input_angle = int(input_value * 10);
	input_angle = input_angle % 3600;
	//printf("input_angle: %d\n", input_angle);
	if (input_angle < 901) { return_value = sin_array[input_angle]; return return_value; }
	if ((900 < input_angle) && (input_angle < 1801))
	{
		return_value = sin_array[1800 - input_angle]; return return_value;
	}
	if ((1800 < input_angle) && (input_angle < 2701))
	{
		return_value = -sin_array[input_angle - 1800]; return return_value;
	}
	if ((2700 < input_angle) && (input_angle < 3601))
	{
		return_value = -sin_array[3600 - input_angle]; return return_value;
	}
	return return_value;
}
//Cosine_table	
float T3T4_alert_R2::cos_table(int input_value) //in degree
{
	float return_value = 0;

	int input_angle = int(input_value * 10);
	input_angle = input_angle % 3600;
	//printf("input_angle: %d\n", input_angle);
	if (input_angle < 901) { return_value = cos_array[input_angle]; return return_value; }
	if ((900 < input_angle) && (input_angle < 1801))
	{
		return_value = -cos_array[1800 - input_angle]; return return_value;
	}
	if ((1800 < input_angle) && (input_angle < 2701))
	{
		return_value = -cos_array[input_angle - 1800]; return return_value;
	}
	if ((2700 < input_angle) && (input_angle < 3601))
	{
		return_value = cos_array[3600 - input_angle]; return return_value;
	}
	return return_value;
}
T3T4_alert_R2::~T3T4_alert_R2()
{
	//release the momory space
	//delete input_t_data;
	//delete w_array;
	delete output_data_Amplitude;
	delete spectrum_x_axis;

	//input_t_data = NULL;
	//w_array = NULL;
	output_data_Amplitude = NULL;
	spectrum_x_axis = NULL;
}
//Read a .wav file
class RW_wav
{
public:
	const char* wav_name;
	FILE* pFile; //file point
	long wav_data_size;  //The size of file stream
	long short_data_size; //The size of buffer with short type (Important)
	short* wav_data_buffer; //data buffer, the wav data is 16bits, so using short type
	size_t result;
	RW_wav()
	{
		delete wav_name;
		wav_name = NULL;
		delete wav_data_buffer;
		wav_data_buffer = NULL;
	}
	void read_wav()
	{
		pFile = fopen(wav_name, "rb");
		if (pFile == NULL)
		{
			printf("%d", fileName);
			fputs("File error", stderr);
			exit(1);
		}
		//
		fseek(pFile, 0, SEEK_END); //Set the location to the end of file
		wav_data_size = ftell(pFile); //Returns the end-location value of the position indicator of the stream.
		short_data_size = wav_data_size / 2;
		//printf("The size of file=%d\n", wav_data_size);
		rewind(pFile);

		// allocate memory to contain the whole file:
		wav_data_buffer = (short*)malloc(sizeof(short) * wav_data_size); //set a space for buffer, buffer_size=data_type*data number
		if (wav_data_buffer == NULL) { fputs("Memory error", stderr); } //Check exit(2);

		// copy the file into the buffer:
		result = fread(wav_data_buffer, 1, wav_data_size, pFile);
		if (result != wav_data_size) { fputs("Reading error", stderr); } //Check exit(3);



		//Release the file point
		fclose(pFile);
		//
		//delete wav_name;
		//wav_name = NULL;
	}
	
	~RW_wav()
	{
		//delete wav_name;

		//wav_name = NULL;
		delete wav_data_buffer;
		wav_data_buffer = NULL;
	}
};


//TXT file
//create a txt file
void create_textfile(const char* txt_file_name)
{
	std::ofstream txt_file;
	txt_file.open(txt_file_name, std::ios::out | std::ios::trunc);
	//Check the text file, if it is created fail, show the warming information
	if (!txt_file)
	{
		printf("Export_file is opened fail\n");
	}
	txt_file.close();
}
//write_number_data_into_txt
void write_number_data_into_txt(const char* txt_file_name, short export_txt_data)
{
	std::ofstream txt_file;
	txt_file.open(txt_file_name, std::ios::out | std::ios::app);
	if (!txt_file)
	{
		printf("Export_file is opened fail\n");
	}
	txt_file << export_txt_data << "\n";
	txt_file.close();
}
void writeFloatDataIntoTXT(const char* txt_file_name, float export_txt_data)
{
	std::ofstream txt_file;
	txt_file.open(txt_file_name, std::ios::out | std::ios::app);
	if (!txt_file)
	{
		printf("Export_file is opened fail\n");
	}
	txt_file << export_txt_data << "\n";
	txt_file.close();
}
void writeIntDataIntoTXT(const char* txt_file_name, int export_txt_data)
{
	std::ofstream txt_file;
	txt_file.open(txt_file_name, std::ios::out | std::ios::app);
	if (!txt_file)
	{
		printf("Export_file is opened fail\n");
	}
	txt_file << export_txt_data << "\n";
	txt_file.close();
}


void audio_T3T4_detection(std::string strFileName)
{

	

	//printf("wav_data_size = %d\n", wav_file_1.wav_data_size);

	//TXT
	//string
	create_textfile("babyData.txt");
	create_textfile("babyDataFFT.txt");


	//Read a wav file
	RW_wav wav_file_1;
	wav_file_1.wav_name = strFileName.c_str();
	wav_file_1.read_wav();
	wav_file_1.wav_data_size = wav_file_1.wav_data_size / 2;

	//T3T4
	T3T4_alert_R2 t3t4_1;
	int buffer1(0);
	buffer1 = wav_file_1.wav_data_buffer[12];
	if (buffer1 < 0) buffer1 = buffer1 + 65536;
	t3t4_1.sampling_rate = buffer1; //16000 //44100
	printf("%d\n", t3t4_1.sampling_rate); //13th is the sampling rate
	t3t4_1.data_size = 512;
	t3t4_1.alert_amplitude_threshold = 1700000; //1000000 
	t3t4_1.alert_frequency_maximum = 3700;
	t3t4_1.alert_frequency_minimum = 2500;
	t3t4_1.alert_period = 1; //second
	t3t4_1.fft_array_initial();
	t3t4_1.fft_x_axis();
	wav_file_1.wav_data_size = wav_file_1.wav_data_size / 2;



	//int iWavSegmentation = wav_file_1.wav_data_size / FFT1.data_size;
	int iWavSegmentation = wav_file_1.wav_data_size / t3t4_1.data_size;

	for (int iseg = 1; iseg < iWavSegmentation; iseg++)
	{

		//Get data of the fft_buffer
		for (int i(0); i < t3t4_1.data_size; i++)
		{
			t3t4_1.re[i] = float(wav_file_1.wav_data_buffer[iseg * t3t4_1.data_size + i]);
			writeFloatDataIntoTXT("babyData.txt", t3t4_1.re[i]);
			printf("%f \n", t3t4_1.re[i]);
			//write_number_data_into_txt("babyData.txt", wav_file_1.wav_data_buffer[iseg * t3t4_1.data_size + i]);
			t3t4_1.im[i] = 0;
			
		}

		t3t4_1.FFT_2_radix();
		//t3t4_1.T3T4_detection();

		//show the result of FFT
		/**/
		for (int i(0); i < t3t4_1.data_size; i++)
		{
			//printf("%f\n", t3t4_1.output_data_Amplitude[i]);
			writeFloatDataIntoTXT("babyDataFFT.txt", t3t4_1.output_data_Amplitude[i]);
		}
		
		//
		if (t3t4_1.audio_alert_flag == 1)
		{
			//printf("T3T4 Alert\n");
			//printf("%s\n", strFileName.c_str());
			//t3t4_1.audio_alert_flag = 0;
			positiveNumber++;
			positiveFlag = 1;
			break;
		}
	}
}
int main()
{
	//test
	Read_folder read1;
	//read1.allFolderNumber = 0;
	//read1.allFileNumber = 0;
	read1.firstFileName = "glass";

	read1.main();

	for (int i(0); i < read1.fileList.size(); i++)
	{
		//printf("%d: %s\n", i,read1.fileList[i].c_str());
		//fileName = i;
		printf("%s\n", read1.fileList[i].c_str());
		audio_T3T4_detection(read1.fileList[i]);

		if (positiveFlag == 1) //if the result is positive
		{
			//printf("%s\n", read1.fileList[i].c_str());
			positiveFlag = 0;
		}
		else // If the result is negative
		{
			//printf("%d\n", i);
			//printf("%s\n", read1.fileList[i].c_str());
		}
		break; //read only one file
	}

	/*
	for (int i(0); i < read1.fileList.size(); i++)
	{
		//printf("%d: %s\n", i,read1.fileList[i].c_str());
		//fileName = i;
		//printf("%s\n", read1.fileList[i].c_str());
		audio_T3T4_detection(read1.fileList[i]);

		//
		if (positiveFlag == 1) //if the alert occours in the audio file
		{
			//printf("%s\n", read1.fileList[i].c_str());
			positiveFlag = 0;
		}
		else //
		{
			//printf("%d\n", i);
			printf("%s\n", read1.fileList[i].c_str());
		}
	}
	printf("positiveNumber: %d, All file number:%d\n", positiveNumber, read1.fileList.size());
	*/
	
	return 0;

	system("pause");
	return 0;
}


